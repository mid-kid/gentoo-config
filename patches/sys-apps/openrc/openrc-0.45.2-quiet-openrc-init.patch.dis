Pass the -q flag to openrc when the "quiet" kernel commandline option is set.

Turns out that running openrc with -q causes issues when unmounting
filesystems, which leaves the dirty bit set.

--- openrc-0.55.1.orig/src/openrc-init/openrc-init.c
+++ openrc-0.55.1/src/openrc-init/openrc-init.c
@@ -45,6 +45,8 @@
 static const char *path_default = "/sbin:/usr/sbin:/bin:/usr/bin";
 static const char *rc_default_runlevel = "default";
 
+static bool quiet = false;
+
 static void do_openrc(const char *runlevel)
 {
 	pid_t pid;
@@ -64,8 +66,12 @@
 			setsid();
 			/* unblock all signals */
 			sigprocmask(SIG_UNBLOCK, &all_signals, NULL);
-			printf("Starting %s runlevel\n", runlevel);
-			execlp("openrc", "openrc", runlevel, NULL);
+			if (quiet) {
+				execlp("openrc", "openrc", "-q", runlevel, NULL);
+			} else {
+				printf("Starting %s runlevel\n", runlevel);
+				execlp("openrc", "openrc", runlevel, NULL);
+			}
 			perror("exec");
 			exit(1);
 			break;
@@ -82,7 +88,12 @@
 static void init(const char *default_runlevel)
 {
 	const char *runlevel = NULL;
+	// The /proc filesystem isn't mounted yet before sysinit...
+	quiet = true;
 	do_openrc("sysinit");
+	char *cmdline_quiet = rc_proc_getent("quiet");
+    if (cmdline_quiet) free(cmdline_quiet);
+	quiet = cmdline_quiet != NULL;
 	do_openrc("boot");
 	if (default_runlevel)
 		runlevel = default_runlevel;
@@ -95,6 +106,7 @@
 		runlevel = rc_default_runlevel;
 	}
 	do_openrc(runlevel);
+    quiet = false;
 	log_wtmp("reboot", "~~", 0, RUN_LVL, "~~");
 }
 
