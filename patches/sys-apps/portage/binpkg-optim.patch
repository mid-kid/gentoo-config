diff --git a/bin/misc-functions.sh b/bin/misc-functions.sh
index 386e50cc8..2abcff5e3 100755
--- a/bin/misc-functions.sh
+++ b/bin/misc-functions.sh
@@ -689,7 +689,11 @@ if [[ -n "${MISC_FUNCTIONS_ARGS}" ]]; then

 	if [[ -n ${PORTAGE_IPC_DAEMON} ]] ; then
 		[[ ! -s ${SANDBOX_LOG} ]]
-		"${PORTAGE_BIN_PATH}"/ebuild-ipc exit $?
+		# Signal the EbuildIpcDaemon to exit, without using ebuild-ipc.
+		# This is significantly faster, as it avoids python's startup time.
+		dd < "${PORTAGE_BUILDDIR}/.ipc/out" \
+			| printf '](V%s\nV%s\ne.' exit $? \
+			| dd > "${PORTAGE_BUILDDIR}/.ipc/in" 2> /dev/null
 	fi
 fi

diff --git a/bin/phase-functions.sh b/bin/phase-functions.sh
index b0654533c..32851c384 100644
--- a/bin/phase-functions.sh
+++ b/bin/phase-functions.sh
@@ -216,7 +216,7 @@ __preprocess_ebuild_env() {
 __ebuild_phase() {
 	local __EBEGIN_EEND_COUNT=0

-	declare -F "$1" >/dev/null && __qa_call $1
+	declare -F "$1" >/dev/null && { __EBUILD_UPDATE_ENV=1; __qa_call $1; }
 	if (( __EBEGIN_EEND_COUNT > 0 )); then
 		eqawarn "QA Notice: ebegin called without eend in $1"
 	fi
@@ -996,6 +996,7 @@ __ebuild_main() {

 	__source_all_bashrcs

+	__EBUILD_UPDATE_ENV=0
 	case ${1} in
 	nofetch)
 		__ebuild_phase_with_hooks pkg_nofetch
@@ -1013,7 +1014,7 @@ __ebuild_main() {
 			__ebuild_phase_with_hooks pkg_${1}
 			set +x
 		fi
-		if [[ -n ${PORTAGE_UPDATE_ENV} ]] ; then
+		if [[ ${__EBUILD_UPDATE_ENV} = 1 && -n ${PORTAGE_UPDATE_ENV} ]] ; then
 			# Update environment.bz2 in case installation phases
 			# need to pass some variables to uninstallation phases.
 			# Use safe cwd, avoiding unsafe import for bug #469338.
@@ -1107,7 +1108,7 @@ __ebuild_main() {
 	esac

 	# Save the env only for relevant phases.
-	if ! has "${1}" clean help info nofetch ; then
+	if [[ ${__EBUILD_UPDATE_ENV} = 1 && $1 != @(clean|help|info|nofetch) ]]; then
 		umask 002

 		# Use safe cwd, avoiding unsafe import for bug #469338.
@@ -1123,7 +1124,10 @@ __ebuild_main() {
 	[[ -n ${PORTAGE_EBUILD_EXIT_FILE} ]] && > "${PORTAGE_EBUILD_EXIT_FILE}"
 	if [[ -n ${PORTAGE_IPC_DAEMON} ]] ; then
 		[[ ! -s ${SANDBOX_LOG} ]]
-
-		"${PORTAGE_BIN_PATH}"/ebuild-ipc exit $?
+		# Signal the EbuildIpcDaemon to exit, without using ebuild-ipc
+		# This is significantly faster, as it avoids python's startup time
+		dd < "${PORTAGE_BUILDDIR}/.ipc/out" \
+			| printf '](V%s\nV%s\ne.' exit $? \
+			| dd > "${PORTAGE_BUILDDIR}/.ipc/in" 2> /dev/null
 	fi
 }
diff --git a/lib/portage/locks.py b/lib/portage/locks.py
index c3eff5c56..6c2484138 100644
--- a/lib/portage/locks.py
+++ b/lib/portage/locks.py
@@ -162,6 +162,7 @@ def _close_fds():
     safely after a fork without exec, unlike the _setup_pipes close_fds
     behavior.
     """
+    portage.process._children = {}
     for fd in list(_open_fds.values()):
         fd.close()

diff --git a/lib/portage/process.py b/lib/portage/process.py
index 3f2c48e92..ce3b3c208 100644
--- a/lib/portage/process.py
+++ b/lib/portage/process.py
@@ -421,15 +421,35 @@ class Process(AbstractProcess):
         self.send_signal(signal.SIGKILL)


+import asyncio as _real_asyncio
+
+_children = {}
+def _sigchld_handler():
+    done = []
+    for event, proc in _children.items():
+        proc.join(0)
+        if proc.exitcode is not None:
+            done.append(event)
+    for event in done:
+        event.set()
+        del _children[event]
+    if not _children:
+        _real_asyncio.get_event_loop().remove_signal_handler(signal.SIGCHLD)
+
+def _sigchld_event(proc):
+    event = _real_asyncio.Event()
+    _children[event] = proc
+    _real_asyncio.get_event_loop().add_signal_handler(signal.SIGCHLD, _sigchld_handler)
+    # Avoid TOCTOU, assume the SIGCHLD has been triggered before it was enabled
+    _sigchld_handler()
+    return event
+
+
 class MultiprocessingProcess(AbstractProcess):
     """
     An object that wraps OS processes created by multiprocessing.Process.
     """

-    # Number of seconds between poll attempts for process exit status
-    # (after the sentinel has become ready).
-    _proc_join_interval = 0.1
-
     def __init__(self, proc: multiprocessing.Process):
         self._proc = proc
         self.pid = proc.pid
@@ -482,11 +502,7 @@ class MultiprocessingProcess(AbstractProcess):

         # Now that proc.sentinel is ready, poll until process exit
         # status has become available.
-        while True:
-            proc.join(0)
-            if proc.exitcode is not None:
-                break
-            await asyncio.sleep(self._proc_join_interval, loop=loop)
+        await _sigchld_event(proc).wait()

     def _proc_join_done(self, future):
         # The join task should never be cancelled, so let it raise
