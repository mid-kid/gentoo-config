--- dunst-1.7.3.orig/src/draw.c
+++ dunst-1.7.3/src/draw.c
@@ -536,7 +536,11 @@
         else
                 height += settings.separator_height;
 
-        draw_rounded_rect(c, x, y, width, height, corner_radius, scale, first, last);
+        // Save outer (without frame) position values
+        int o_x = x;
+        int o_y = y;
+        int o_width = width;
+        int o_height = height;
 
         /* adding frame */
         x += settings.frame_width;
@@ -546,6 +550,8 @@
         }
 
         width -= 2 * settings.frame_width;
+        if (ret_width)
+                *ret_width = width;
 
         if (last)
                 height -= settings.frame_width;
@@ -554,13 +560,41 @@
 
         radius_int = frame_internal_radius(corner_radius, settings.frame_width, height);
 
-        draw_rounded_rect(c, x, y, width, height, radius_int, scale, first, last);
+        // Pre-scale everything so we can split the bar on an exact pixel
+        x = round(x * scale);
+        y = round(y * scale);
+        width = round(width * scale);
+        height = round(height * scale);
+        o_x = round(o_x * scale);
+        o_y = round(o_y * scale);
+        o_width = round(o_width * scale);
+        o_height = round(o_height * scale);
+        corner_radius = round(corner_radius * scale);
+
+        // Calculate the position at which to split the bar
+        int o_progress_width = o_width;
+        if (cl->n->progress >= 0) {
+                o_progress_width = o_width * cl->n->progress / 100;
+        }
+        int progress_width = o_progress_width - (x - o_x);
+        if (progress_width < 0) progress_width = 0;
+        if (progress_width > width) progress_width = width;
+
+        draw_rounded_rect(c, o_x, o_y, o_progress_width, o_height, corner_radius, 1, first, last);
+        draw_rounded_rect(c, x, y, progress_width, height, radius_int, 1, first, last);
         cairo_set_source_rgba(c, cl->frame.r, cl->frame.g, cl->frame.b, cl->frame.a);
         cairo_fill(c);
+        draw_rounded_rect(c, o_x + o_progress_width, o_y, o_width - o_progress_width, o_height, corner_radius, 1, first, last);
+        draw_rounded_rect(c, x + progress_width, y, width - progress_width, height, radius_int, 1, first, last);
+        cairo_set_source_rgba(c, cl->frame.r - 0.2, cl->frame.g - 0.2, cl->frame.b - 0.2, cl->frame.a);
+        cairo_fill(c);
 
-        draw_rounded_rect(c, x, y, width, height, radius_int, scale, first, last);
+        draw_rounded_rect(c, x, y, progress_width, height, radius_int, 1, first, last);
         cairo_set_source_rgba(c, cl->bg.r, cl->bg.g, cl->bg.b, cl->bg.a);
         cairo_fill(c);
+        draw_rounded_rect(c, x + progress_width, y, width - progress_width, height, radius_int, 1, first, last);
+        cairo_set_source_rgba(c, cl->bg.r - 0.2, cl->bg.g - 0.2, cl->bg.b - 0.2, cl->bg.a);
+        cairo_fill(c);
 
         cairo_set_operator(c, CAIRO_OPERATOR_SOURCE);
 
@@ -570,19 +604,14 @@
                 struct color sep_color = layout_get_sepcolor(cl, cl_next);
                 cairo_set_source_rgba(c, sep_color.r, sep_color.g, sep_color.b, sep_color.a);
 
-                draw_rect(c, settings.frame_width, y + height, width, settings.separator_height, scale);
+                draw_rect(c, settings.frame_width, y + height, width, settings.separator_height, 1);
 
                 cairo_fill(c);
         }
 
         cairo_destroy(c);
 
-        if (ret_width)
-                *ret_width = width;
-
-        return cairo_surface_create_for_rectangle(srf,
-                                                  round(x * scale), round(y * scale),
-                                                  round(width * scale), round(height * scale));
+        return cairo_surface_create_for_rectangle(srf, x, y, width, height);
 }
 
 static void render_content(cairo_t *c, struct colored_layout *cl, int width, double scale)
