#!/bin/sh
set -e

# This is a slightly beefed up version of "emerge -uDU @world", that makes sure
# important pacakges are upgraded first, regardless of what portage thinks.

has_update() {
	emerge -p1 --update-if-installed "$@" | grep -q '^\['
}
pre_update() {
	echo "Checking updates for $@..."
	updated=false
	has_update "$@" || return 0
	updated=true
	emerge --ask=n -1 --update-if-installed "$@"
}

# Apply package moves
emerge -pqnO sys-apps/baselayout

# Upgrade portage
pre_update \
	sys-apps/sandbox \
	sys-apps/portage

# Upgrade base configurations that might influence portage
pre_update sys-apps/baselayout

# Upgrade compiler to make sure to use the latest one
pre_update \
	sys-devel/binutils \
	sys-devel/gcc
if $updated; then
	eselect binutils set latest
	eselect gcc set latest
fi

# I use CC=clang to link in a few places, and llvm has a tendency to update
# before lld/clang, producing incompatible object files in e.g. rust
pre_update \
	llvm-core/clang \
	llvm-core/lld

# libc is already upgraded first anyway, no need to list separately

# Upgrade entire rest of the system
echo "Upgrading @world..."
emerge -uDU --ask=n --binpkg-changed-deps=y "$@" @world
